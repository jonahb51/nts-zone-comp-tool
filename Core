
import streamlit as st
import pandas as pd
import numpy as np
import sqlite3
from datetime import datetime

# Set up SQLite connection
conn = sqlite3.connect('nts_zone_comp_logs.db', check_same_thread=False)
cursor = conn.cursor()

# Create table if it doesn't exist
cursor.execute("""
CREATE TABLE IF NOT EXISTS nts_shift_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    time TEXT,
    line TEXT,
    temp_f REAL,
    humidity INTEGER,
    filler_speed INTEGER,
    zone1_comp REAL,
    zone2_comp REAL,
    zone3_comp REAL,
    zone4_comp REAL,
    zone5_comp REAL,
    ai_percent INTEGER,
    success_flag TEXT,
    notes TEXT
)
""")
conn.commit()

# Sample historical data (mock)
data = {
    "Line": ["L1", "L1", "L1", "L2", "L2", "L2", "L1", "L2", "L1", "L2"],
    "Zone": [1, 2, 3, 3, 4, 5, 4, 1, 5, 2],
    "Temp (F)": [75.0, 78.0, 80.0, 88.0, 90.0, 85.0, 82.0, 79.0, 91.0, 87.0],
    "Humidity (%)": [40, 50, 55, 45, 65, 60, 50, 52, 62, 48],
    "Zone Comp": [0.30, 0.35, 0.40, 0.35, 0.30, 0.25, 0.32, 0.28, 0.26, 0.33],
    "Filler Speed (BPM)": [900, 950, 1000, 1075, 1025, 975, 1040, 960, 940, 1010],
    "Success Rate (%)": [96, 92, 89, 91, 93, 94, 90, 95, 88, 90]
}
df = pd.DataFrame(data)

# Sidebar for inputs
with st.sidebar:
    st.header("ðŸ§¾ Shift Input")
    selected_line = st.selectbox("Select Line", ["L1", "L2"])
    temp = st.number_input("Ambient Temp (Â°F)", min_value=60.0, max_value=80.0, step=0.1, value=72.0)
    humidity = st.slider("Humidity (%)", 30, 80, 50)
    filler_speed = st.slider("Filler Speed (BPM)", 900, 1200, 1075)
    ai_percent = st.slider("AI (%)", 80, 100, 96)
    success_flag = st.selectbox("Success?", ["Yes", "No"])
    notes = st.text_area("Notes")

st.title("ðŸ”§ NTS Zone Comp Tool")

# Compute recommendations
st.subheader(f"ðŸ“Š Zone Comp Recommendations for {selected_line}")
results = []
for zone in range(1, 6):
    df_line = df[(df['Line'] == selected_line) & (df['Zone'] == zone)]
    if df_line.empty:
        results.append({"Zone": zone, "Recommended Comp": "N/A", "Success Rate": "N/A", "Match": "No historical match"})
        continue
    df_line['Total Diff'] = (
        np.abs(df_line['Temp (F)'] - temp) * 0.4 +
        np.abs(df_line['Humidity (%)'] - humidity) * 0.4 +
        np.abs(df_line['Filler Speed (BPM)'] - filler_speed) * 0.2
    )
    best = df_line.sort_values("Total Diff").iloc[0]
    results.append({
        "Zone": zone,
        "Recommended Comp": best["Zone Comp"],
        "Success Rate": best["Success Rate (%)"],
        "Match": f"{best['Temp (F)']}Â°F, {best['Humidity (%)']}% RH, {best['Filler Speed (BPM)']} BPM"
    })

recommend_df = pd.DataFrame(results)
st.dataframe(recommend_df)

# Save to database
if st.button("ðŸ’¾ Save Shift Log"):
    now = datetime.now()
    values = (
        now.strftime("%Y-%m-%d"),
        now.strftime("%H:%M:%S"),
        selected_line,
        temp,
        humidity,
        filler_speed,
        recommend_df.iloc[0]["Recommended Comp"] if recommend_df.iloc[0]["Recommended Comp"] != "N/A" else None,
        recommend_df.iloc[1]["Recommended Comp"] if recommend_df.iloc[1]["Recommended Comp"] != "N/A" else None,
        recommend_df.iloc[2]["Recommended Comp"] if recommend_df.iloc[2]["Recommended Comp"] != "N/A" else None,
        recommend_df.iloc[3]["Recommended Comp"] if recommend_df.iloc[3]["Recommended Comp"] != "N/A" else None,
        recommend_df.iloc[4]["Recommended Comp"] if recommend_df.iloc[4]["Recommended Comp"] != "N/A" else None,
        ai_percent,
        success_flag,
        notes
    )
    cursor.execute("""
    INSERT INTO nts_shift_logs (
        date, time, line, temp_f, humidity, filler_speed,
        zone1_comp, zone2_comp, zone3_comp, zone4_comp, zone5_comp,
        ai_percent, success_flag, notes
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, values)
    conn.commit()
    st.success("âœ… Shift data saved successfully!")
